<?php
/**
 * This file is used to make the async curl request for the passed URL
 * For the sake of simplicity, this file is having limited functionality but it can be modified to turn it into a full independent library with multiple options
 */
class MultiCURL
{
    /**
     * This function is used to create the async curl requests and return the output array
     * @param array $data pass in the array of URLs
     * @return array of CURL output against passed URLs
     */
    public function GetURLData($data, $id = null)
    {
        // initialize the CURL requests
        $mCurl = curl_multi_init();
        foreach ($data as $key => $URL)
        {
            // echo "{$URL}\n";
            $ch[$URL] = curl_init();
            curl_setopt_array($ch[$URL], array(
                CURLOPT_URL            => $URL,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_TIMEOUT        => 30,
                CURLOPT_CONNECTTIMEOUT => 30,
                CURLOPT_POST           => false,
                CURLOPT_HEADER         => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_MAXREDIRS      => 5,
                CURLOPT_HTTPHEADER     => array('User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12'), // This is required for the sites like Facebook
            ));
            curl_multi_add_handle($mCurl, $ch[$URL]);
        } // foreach ends
        $running = 0;
        $total   = count($data);
        do
        {
            $dataOut = array();
            curl_multi_exec($mCurl, $running);
            $done = curl_multi_info_read($mCurl);
            // print_r($data);
            if ($done)
            {
                $per = (100 - (($running / $total) * 100));
                // echo "{$per}%\n";
                // print_r($done);
                $info = curl_getinfo($done["handle"]);
                // print_r($info);
                if ($info["http_code"] == 200)
                {
                    $url                   = parse_url($info["url"])["host"];
                    $dataOut["urls"][$url] = self::GetFinalResult(curl_multi_getcontent($done["handle"]));
                    $dataOut["complete"]   = $per;
                    sendMsg($id, json_encode($dataOut));
                }
            }
            // print_r($data);
        } while ($running > 0);
        // print_r($dataOut);
        // print_r($data);
        // foreach ($ch as $URL => $r)
        // {
        //     $result[$URL] = curl_multi_getcontent($r);
        //     curl_multi_remove_handle($mCurl, $r);
        // } // foreach ends

        curl_multi_close($mCurl);

        // return $result;
    } // function GetURLData ends

    /**
     * Get the final required output which will be sent to the client
     * @param array $result pass the result generated by GetDataFromMultiCURL
     */
    private function GetFinalResult($pageContent)
    {
        $dom = new DomDocument();
        @$dom->loadHTML($pageContent);
        $nodes = $dom->getElementsByTagName('title');
        return ($nodes->item(0)->nodeValue) ? $nodes->item(0)->nodeValue : "";
    } // function GetFinalResult ends
} // class MultiCURL ends

// $data[] = "http://google.com";
// $data[] = "http://yahoo.com";
// $data[] = "http://facebook.com";

// $multi = new MultiCURL();
// $multi->GetURLData($data);
